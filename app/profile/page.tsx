"use client";
import { useState, useEffect } from "react";
import  Rental  from "../rental/page";
import { NextRequest, NextResponse } from "next/server";
import { mysqlPool } from "@/utils/db";
import bcrypt from "bcryptjs";  // ‡πÉ‡∏ä‡πâ bcryptjs ‡πÅ‡∏ó‡∏ô bcrypt
const jwt = require('jsonwebtoken'); // ‡πÉ‡∏ä‡πâ jwt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Token
import { config } from "@/config"; // ‡∏î‡∏∂‡∏á secretkey
import { useRouter } from 'next/navigation'; // ‡πÅ‡∏Å‡πâ‡∏à‡∏≤‡∏Å next/router ‡πÄ‡∏õ‡πá‡∏ô next/navigation
import { useBooking } from "../context/bookingcontext";

const secret = config.JWT_SECRET;// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ secret key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö JWT

interface Notification {
  notificationID: number;
  sendDate: string;
  message: string;
  recipient: string;
  CustomerID: number;
};

export function NotificationSettings() {
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [expandedNotification, setExpandedNotification] = useState<number | null>(null);

  useEffect(() => {
    const fetchNotifications = async () => {
      try {
        const response = await fetch("/api/getNotifications");

        console.log("üì• Raw response:", response);

        if (!response.ok) {
          const text = await response.text();
          console.error(`‚ùå Fetch failed: ${response.status} - ${text}`);
          throw new Error(`HTTP ${response.status}`);
        }

        const contentType = response.headers.get("content-type");
        console.log("üßæ Content-Type:", contentType);

        if (contentType && contentType.includes("application/json")) {
          const text = await response.text();
          console.log("üì¶ Raw text from API:", text);

          if (!text) {
            console.warn("‚ö†Ô∏è API responded with empty body!");
            throw new Error("Empty JSON response");
          }

          const data = JSON.parse(text);
          console.log("‚úÖ Parsed JSON:", data);

          if (Array.isArray(data)) {
            setNotifications(data);
          } else {
            console.warn("‚ö†Ô∏è API returned non-array JSON:", data);
            setNotifications([]);
          }
        } else {
          throw new Error("Invalid content-type, not JSON");
        }
      } catch (error) {
        console.error("‚ùå Fetch error:", error);
        setNotifications([]);
      }
    };

    fetchNotifications();
  }, []);

  return (
    <div className="p-6 min-w-2xl mx-auto border rounded-lg shadow-sm">
      <h2 className="text-xl font-semibold mb-1">‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</h2>
      <p className="text-sm text-gray-300 mb-4">
        ____________________________________________________________________________________________________________________________________________
      </p>
      <p className="text-sm text-gray-500 mb-4">‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö</p>

      <div className="space-y-4">
        {notifications.map((notification) => (
          <div key={notification.notificationID} className="bg-gray-100 p-4 rounded-lg">
            <div
              className="cursor-pointer hover:bg-gray-200 p-2 rounded"
              onClick={() =>
                setExpandedNotification(
                  expandedNotification === notification.notificationID
                    ? null
                    : notification.notificationID
                )
              }
            >
              <p className="text-sm font-semibold">{notification.message}</p>
              <p className="text-xs text-gray-500">
                {new Date(notification.sendDate).toLocaleString()}
              </p>
            </div>

            {expandedNotification === notification.notificationID && (
              <div className="mt-2 p-4 bg-white border rounded-lg shadow-sm">
                <p className="text-sm whitespace-pre-line">{notification.message}</p>
                <p className="text-xs text-gray-500">‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö: {notification.recipient}</p>
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
}

export function rentalFilter() {
  /*‡∏£‡∏≠‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏∏‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏£‡∏ñ */
}


export default function Pro() {
  const [activeTab, setActiveTab] = useState<string | null>(null);
  const [userName, setUserName] = useState("");  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô string ‡∏ß‡πà‡∏≤‡∏á
  const [phoneNumber, setPhoneNumber] = useState("");  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô string ‡∏ß‡πà‡∏≤‡∏á
  const [oldPassword, setOldPassword] = useState(""); // ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡πà‡∏≤
  const [newPassword, setNewPassword] = useState(""); // ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
  const router = useRouter();
  const customerID = "" ;
  useEffect(() => {
    // ‡∏î‡∏∂‡∏á userName ‡∏à‡∏≤‡∏Å localStorage ‡∏´‡∏≤‡∏Å‡∏°‡∏µ
    const storedUserName = localStorage.getItem("userName");
    if (storedUserName) {
      setUserName(storedUserName);  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ userName ‡πÉ‡∏ô localStorage ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    }
  }, []);  // ‡πÅ‡∏Ñ‡πà‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡πÇ‡∏´‡∏•‡∏î
 
  const menuItems = [
    { id: "profile", label: "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå" },
    { id: "password", label: "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" },
    { id: "notification", label: "‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô" },
    { id: "contact", label: "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠" },
  ];
  interface DataToSend {
    userName?: string;
    phoneNumber?: string;
  }
  const handleSubmit = async () => {
    const token = localStorage.getItem("token");
    const customerID = sessionStorage.getItem("CustomerID"); // ‡∏î‡∏∂‡∏á CustomerID ‡∏à‡∏≤‡∏Å sessionStorage

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ CustomerID ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
  if (!customerID) {
    alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô");
    return;
  }
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á userName ‡πÅ‡∏•‡∏∞ phoneNumber ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å input
    const updatedUserName = userName.trim(); // ‡∏Ñ‡πà‡∏≤ userName ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å
    const updatedPhoneNumber = phoneNumber.trim(); // ‡∏Ñ‡πà‡∏≤ phoneNumber ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å
  
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÉ‡∏ô request
    const dataToSend: DataToSend = {}; 
  
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å userName ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (updatedUserName) {
      dataToSend.userName = updatedUserName;
    }
  
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å phoneNumber ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (updatedPhoneNumber) {
      dataToSend.phoneNumber = updatedPhoneNumber;
    }
  
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô dataToSend ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (Object.keys(dataToSend).length > 0) {
      const response = await fetch("/api/manageUsername", {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify({
          ...dataToSend,
          customerID: customerID  // ‡∏™‡πà‡∏á CustomerID ‡πÑ‡∏õ API
        }),
      });
      const result = await response.json(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å API
  
      // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å API
      if (response.ok) {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        alert(result.message);
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        alert(result.error);
      }
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡πÑ‡∏õ
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á");
    }
    
  };

  const handleSubmitPasswordChange = async () => {
    const token = localStorage.getItem("token");
    const customerID = sessionStorage.getItem("CustomerID"); // ‡∏î‡∏∂‡∏á CustomerID ‡∏à‡∏≤‡∏Å sessionStorage
     console.log("CustomerID:", customerID);

      if (!customerID) {
        alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô");
        return;
      }
        

    const response = await fetch("/api/changePW", {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${token}`,
      },
      body: JSON.stringify({
        oldPassword,  // ‡∏™‡πà‡∏á oldPassword
        newPassword,  // ‡∏™‡πà‡∏á newPassword
        customerID    // ‡∏™‡πà‡∏á customerID
      }),
    });
    const result = await response.json();
    
    if (response.ok) {
      alert(result.message)
    } else {
      alert(result.error);
    }
  };
  const handleLogout = async () => {
    const name = sessionStorage.getItem("name");
    if (!name) {
      return;
    }
  if (typeof window !== 'undefined') {
    const token = localStorage.getItem("token");
    sessionStorage.removeItem("CustomerID");
    sessionStorage.removeItem("name");

    try {
      const response = await fetch("/api/logout", {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${token}`,
        },
      });

      const result = await response.json();
      alert(result.message); // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  
      // ‡∏•‡∏ö Token ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å LocalStorage
      localStorage.removeItem("token");
  
      console.log("Token ‡∏´‡∏•‡∏±‡∏á Logout:", localStorage.getItem("token")); // ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô null
      if (!token) {
        console.log("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Token ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß");
        //alert("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ");
        router.push("/");
        return;
      }
       // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
    } catch (error) {
      console.error("‚ùå Error logging out:", error);
    }
  }
};

  
  const renderContent = () => {
    switch (activeTab) {
      case "profile":
        return (
          <div className="p-6 min-w-2xl mx-auto ">
            <h2 className="text-xl font-semibold mb-4">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå</h2>
            <form className="flex flex-col space-y-4 " onSubmit={(e) => e.preventDefault() }>
              <label>
                username:
                <input type="text" value={userName}
                 onChange={(e) => setUserName(e.target.value)} className="border p-2 rounded-lg w-full" />
              </label>
              <label>
                phone number:
                <input type="phone" value={phoneNumber}
                onChange={(e) => setPhoneNumber(e.target.value)}className="border p-2 rounded-lg w-full" />
              </label>
              <button type="submit" onClick={handleSubmit} className="bg-blue-600 text-white px-4 py-2 rounded-lg">
                ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
              </button>
            </form>
          </div>
        );
        case "password":
          return (
            <div className="p-6 min-w-2xl mx-auto">
              <h2 className="text-xl font-semibold mb-4">‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</h2>
              <form className="flex flex-col space-y-4">
                <label>
                  ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°:
                  <input
                    type="password"
                    value={oldPassword}
                    onChange={(e) => setOldPassword(e.target.value)}
                    className="border p-2 rounded-lg w-full"
                  />
                </label>
                <label>
                  ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà:
                  <input
                    type="password"
                    value={newPassword}
                    onChange={(e) => setNewPassword(e.target.value)}
                    className="border p-2 rounded-lg w-full"
                  />
                </label>
                <button
                  type="button"
                  onClick={handleSubmitPasswordChange}
                  className="bg-blue-600 text-white px-4 py-2 rounded-lg"
                >
                  ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
                </button>
              </form>
            </div>
          );
      case "notification":
        return <NotificationSettings />;
      case "contact":
        return (
          <div className="p-6 min-w-2xl mx-auto">
            <h2 className="text-xl font-semibold mb-4">‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤</h2>
            <p>Email: support@example.com</p>
            <p>Phone: +123 456 7890</p>
          </div>
        );
      case "history":
        return (
          <div className=" min-w-2xl mx-auto">
            <div className="grid place-items-center w-full h-full relative">
              <div className="absolute top-0 left-0 w-full text-center text-white bg-white bg-opacity-100 p-5 ">
                <h2 className="text-black text-left text-2xl font-bold ">‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô</h2>
                <div className="mt-4 border">
                </div>
                <p className="py-3 px-20 text-gray-800 text-right">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô : </p>
              </div>
              <Rental/>
            </div>
          </div>
        );
      default:
        return <div className="p-6 min-w-2xl mx-auto">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢</div>;
    }
  };

  return (
    <div className="flex min-h-screen bg-gray-100">
      <div className="w-72 space-y-4 ml-10">
        <div className="flex flex-col items-center mb-10 mt-10">
          <h2 className="text-xl font-semibold mb-4 mt-20">‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå</h2>
          <div className="w-32 h-32 bg-gray-300 rounded-full flex items-center justify-center">üë§</div>
          <div className="mt-4 text-center">
          {/* <p className="text-blue-600 cursor-pointer mt-4">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</p> */}
            <p className="text-xl text-blue-600 font-semibold">{userName}</p>
          </div>
        </div>

        <button
          onClick={() => setActiveTab("history")}
          className={`w-full text-left py-2 px-4 rounded-lg transition-all bg-white ${activeTab === "history" ? "bg-gray-200" : "hover:bg-gray-200"}`}
        >
          ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô
        </button>

        <div className="bg-white shadow-lg rounded-lg p-4 space-y-2">
          {menuItems.map((item) => (
            <button
              key={item.id}
              onClick={() => setActiveTab(item.id)}
              className={`w-full text-left py-2 px-4 rounded-lg transition-all ${activeTab === item.id ? "bg-gray-200" : "hover:bg-gray-200"}`}
            >
              {item.label}
            </button>
          ))}
        </div>
        <button
          onClick={() => {
            setActiveTab("logout");
            handleLogout();
          }}
          className={`w-full text-left py-2 px-4 rounded-lg transition-all bg-white ${activeTab === "logout" ? "bg-gray-200" : "hover:bg-gray-200"}`}
        >
          ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
        </button>
      </div>
      <div className="flex-1 p-10 mt-20">
        <div className="bg-white shadow-lg rounded-lg overflow-hidden">{renderContent()}</div>
      </div>
    </div>
  );
}
