import { NextRequest, NextResponse } from "next/server";
import { mysqlPool } from "@/utils/db";
const jwt = require('jsonwebtoken');
import { config } from "@/config";
import bcrypt from "bcryptjs"; 

const SECRET_KEY = config.JWT_SECRET; // Secret Key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö JWT

export async function PUT(req: NextRequest) {
  try {
    console.log("üìå API password hit");
    
    // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ oldPassword, newPassword ‡πÅ‡∏•‡∏∞ customerID ‡∏à‡∏≤‡∏Å request body
    const { oldPassword, newPassword, customerID } = await req.json();

    // ‡∏î‡∏∂‡∏á Token ‡∏à‡∏≤‡∏Å Header
    const token = req.headers.get("Authorization")?.split(" ")[1];

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ Token ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!token) {
      console.error("üö® No token provided");
      return NextResponse.json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö" }, { status: 401 });
    }

    if (!oldPassword || !newPassword) {
      return NextResponse.json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡∏°‡πà" }, { status: 400 });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°
    const getUserQuery = `SELECT password FROM Customer WHERE CustomerID = ?`;
    const [user]: any = await mysqlPool.promise().query(getUserQuery, [customerID]);

    if (user.length === 0) {
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" }, { status: 404 });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ oldPassword ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
    const isMatch = await bcrypt.compare(oldPassword, user[0].password);
    if (!isMatch) {
      return NextResponse.json({ error: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" }, { status: 400 });
    }

    // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
    const hashedNewPassword = await bcrypt.hash(newPassword, 10);

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
    const updatePasswordQuery = `UPDATE Customer SET password = ? WHERE CustomerID = ?`;
    await mysqlPool.promise().query(updatePasswordQuery, [hashedNewPassword, customerID]);

    return NextResponse.json({ message: "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‚úÖ" });

  } catch (error) {
    console.error("üö® Error in manageUsername:", error);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}
